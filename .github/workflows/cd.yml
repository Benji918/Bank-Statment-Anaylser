name: Development Deployment Workflow

on:
  push:
    branches:
      - dev

jobs:
  dev-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Deploy To Droplet
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DIGITALOCEAN_DROPLET_IP }}
          username: root
          key: ${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "üîÑ Starting deployment..."
            
            # Install PM2 if not already installed
            if ! command -v pm2 &> /dev/null; then
                echo "Installing PM2..."
                npm install -g pm2
            fi
            
            # Check if the directory exists
            if [ -d "$HOME/Bank-Statment-Anaylser" ]; then
              echo "Directory 'Bank-Statment-Anaylser' exists....."
            fi
            
            echo "Pulling repository changes..."
            cd $HOME/Bank-Statment-Anaylser
            
            # Create .env file on the droplet
            echo "${{ secrets.ENV_FILE }}" > .env
            
            # Ensure we're on the right branch
            git reset --hard HEAD
            git clean -fd
            git fetch origin dev
            git checkout dev
            git pull origin dev
            echo "‚úì Git changes pulled"
            
            # Create or reuse existing environment
            if [ ! -d "venv" ]; then
              python3.11 -m venv venv
              echo "‚úì Virtual environment created"
            else 
              echo "‚úì Using existing virtual environment"
            fi
            
            source venv/bin/activate
            echo "‚úì Activated virtual environment"
            
            REQUIREMENTS_FILE="/root/.previous_requirements_hash"
            
            if [ ! -f "requirements.txt" ]; then
                echo "‚ùå requirements.txt not found!"
                exit 1
            fi

            # Calculate hash of current requirements.txt
            CURRENT_HASH=$(md5sum requirements.txt | cut -d' ' -f1)
            
            # Check if hash file exists and compare hashes
            if [ ! -f "$REQUIREMENTS_FILE" ] || [ "$(cat $REQUIREMENTS_FILE)" != "$CURRENT_HASH" ]; then
                echo "üì¶ Requirements changed, installing dependencies..."
                pip install -r requirements.txt
                # Save new hash
                echo "$CURRENT_HASH" > "$REQUIREMENTS_FILE"
            else
                echo "‚úì Requirements unchanged, skipping installation"
            fi
            
            ALEMBIC_CMD="$PWD/venv/bin/alembic"
            
            if [ ! -f "$ALEMBIC_CMD" ]; then
              echo "Installing alembic..."
              pip install alembic
            fi
            
            # Check for multiple Alembic heads and merge them if necessary
            echo "Checking Alembic migrations..."
            alembic_heads=$($ALEMBIC_CWD heads | grep -v '^$' | wc -l)
            if [ "$alembic_heads" -gt 1 ]; then
                echo "Multiple Alembic heads detected. Merging heads..."
                $ALEMBIC_CMD merge heads -m "merge heads for deployment" || { echo "Failed to merge Alembic heads"; exit 1; }
            fi
            
            $ALEMBIC_CMD upgrade head || { echo "Failed to run Alembic migrations"; exit 1; }
            echo "‚úì Database migrations completed"
            
            # Delete any existing pm2 processes
            pm2 delete all 2>/dev/null || true
            
            # Verify ecosystem file exists
            if [ ! -f "ecosystem.config.js" ]; then
               echo "‚ùå ecosystem.config.js not found!"
              exit 1
            fi
            
            echo "Starting application with pm2"
            pm2 start ecosystem.config.js
          
            # Save PM2 process list
            pm2 save
            
            # Ensure PM2 starts on system reboot
            pm2 startup
            
            # Check if the application is running
            if pm2 show bank-statement-analyzer | grep -q "online"; then
                echo "‚úÖ Application successfully started with PM2 at $(date)"
            else
                echo "‚ùå Application failed to start"
                pm2 logs bank-statement-analyzer --lines 50
                exit 1
            fi
            
            if pm2 show celery-worker | grep -q "online"; then
                echo "‚úÖ Celery workers successfully started with PM2"
            else 
                echo "‚ùå Celery workers failed to start"
                pm2 logs celery-worker --lines 50
                exit 1
            fi