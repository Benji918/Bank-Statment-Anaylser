name: Development Deployment Workflow
description: 'Automated deployment workflow for development branch'

on:
  push:
    branches:
      - dev


jobs:
  dev-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

#      - name: Copy .env
#        run: |
#          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Check already installed dependencies
        run: |
          pip freeze > installed.txt
          echo "Installed dependencies fetched"

      - name: Install only missing or new dependencies
        run: |
          pip install --cache-dir ~/.cache/pip -r <(grep -vxFf installed.txt requirements.txt)
          echo "Only new/missing dependencies installed"

      - name: Deploy To Droplet
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DIGITALOCEAN_DROPLET_IP }}
          username: root
          key: ${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "ðŸ”„ Starting deployment..."
            
            # Check if the directory exists, if not clone repo
            if [ ! -d "~/Bank-Statment-Anaylser" ]; then
              echo "Directory 'Bank-Statment-Anaylser' exists. Cleaning up..."
              rm -rf Bank-Statment-Anaylser 
            fi
            
            echo "Cloning repository..."
            git clone https://github.com/Benji918/Bank-Statment-Anaylser.git
            cd ~/Bank-Statment-Anaylser
            
            # Create .env file on the droplet
            echo "${{ secrets.ENV_FILE }}" > .env
            
            # Ensure we're on the right branch
            git fetch origin dev
            git checkout dev
            git reset --hard origin/dev
             echo "âœ“ Git changes pulled"
            
            # Create or reuse existing environment
            if [ ! -d "venv" ]; then
              python3 -m venv venv
              echo "âœ“ Virtual environment created"
            else 
              echo "âœ“ Using existing virtual environment"
            fi
            
            source venv/bin/activate
            echo "âœ“ Activated virtual environment"
            
            pip install -r requirements.txt
            echo "âœ“ Dependencies installed"
            
            # Check for multiple Alembic heads and merge them if necessary
            echo "Checking Alembic migrations..."
            alembic_heads=$(alembic heads | grep -v '^$' | wc -l)
            if [ "$alembic_heads" -gt 1 ]; then
                echo "Multiple Alembic heads detected. Merging heads..."
                alembic merge heads -m "merge heads for deployment" || { echo "Failed to merge Alembic heads"; exit 1; }
            fi
            
            alembic upgrade head || { echo "Failed to run Alembic migrations"; exit 1; }
            echo "âœ“ Database migrations completed"
            
            # Kill any running Uvicorn (ignore errors if none)
            pkill -f "uvicorn app:app" || true
            
            # Start Uvicorn in background
            nohup venv/bin/uvicorn app:app \
            --host 0.0.0.0 \
            --port 8000 \
            --reload False > uvicorn.log 2>&1 &
            
            echo "âœ… Deployed at $(date)"
            
            



      
  




